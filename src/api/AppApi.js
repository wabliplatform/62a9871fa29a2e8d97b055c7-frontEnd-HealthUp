/**
 * TempApi
 * This is a sample openApi document
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: lampralexandros@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import App from '../model/App';

/**
* App service.
* @module api/AppApi
* @version 1.0.0
*/
export default class AppApi {

    /**
    * Constructs a new AppApi. 
    * @alias module:api/AppApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createapp operation.
     * @callback module:api/AppApi~createappCallback
     * @param {String} error Error message, if any.
     * @param {module:model/App} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates the data
     * @param {module:model/App} app data to be created
     * @param {module:api/AppApi~createappCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/App}
     */
    createapp(app, callback) {
      let postBody = app;
      // verify the required parameter 'app' is set
      if (app === undefined || app === null) {
        throw new Error("Missing the required parameter 'app' when calling createapp");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = App;
      return this.apiClient.callApi(
        '/app', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteapp operation.
     * @callback module:api/AppApi~deleteappCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the element
     * @param {String} appId the Id parameter
     * @param {module:api/AppApi~deleteappCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteapp(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling deleteapp");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/app/{appId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllapp operation.
     * @callback module:api/AppApi~getAllappCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/App>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the data
     * @param {module:api/AppApi~getAllappCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/App>}
     */
    getAllapp(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [App];
      return this.apiClient.callApi(
        '/app/getAll', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getapp operation.
     * @callback module:api/AppApi~getappCallback
     * @param {String} error Error message, if any.
     * @param {module:model/App} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the element
     * @param {String} appId the Id parameter
     * @param {module:api/AppApi~getappCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/App}
     */
    getapp(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getapp");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = App;
      return this.apiClient.callApi(
        '/app/{appId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateapp operation.
     * @callback module:api/AppApi~updateappCallback
     * @param {String} error Error message, if any.
     * @param {module:model/App} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the element
     * @param {String} appId the Id parameter
     * @param {Object} opts Optional parameters
     * @param {module:model/App} opts.app data to be updated
     * @param {module:api/AppApi~updateappCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/App}
     */
    updateapp(appId, opts, callback) {
      opts = opts || {};
      let postBody = opts['app'];
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling updateapp");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = App;
      return this.apiClient.callApi(
        '/app/{appId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
